

# All content after # is always non-runtime

# with single char, it will continue comments
  When indented by at least 2 spaces
  and continues until the next line not starting with space.

## all non-runtime types can have a second char to
Allow unindented
Non-runtime blocks
this always terminates with the same chars
##


# regular comment
#. RST
#: yaml
#! Raw comment
#+plugin

# expect
1 #= 1
#= 57
57

# “|” is the else / elif operator
# “|” is also the logical or operator
# “ 0 “ is Boolean false
# “ 1 “ is Boolean true
# “~” is the None value
# “.p“ prints

# = is assignment for new symbols
# = is comparison for existing symbols
#= 1
45 == 45
#= 0
45 == 46
#= 7
v = 7
#= 1
v = 7
#= 0
v = 8
r1 = v = 7 #= 1
r2 = v = 8 #= 0
r1 = r2 #= 0
r3 = 9 #= 9

# ? commands are runtime
# assert
? 1 = 1
?+plugin

# “(“ is identical to new line and indent
# “)” is identical to new line and un-indent
# @ is return
# func_name arg1 arg2: expressions

max a b:
  a > b
    @ a
  @ b
max a b:
  a > b ( @ a ) @ b
max a b: ( a > b ( @ a ) @ b )
max a b: a > b ( @ a ) @ b

printmax1: a b
  a > b
    .p “got max from first”
    .p a
  | a < b
    .p “got max from second”
    .p b
  |
    .p “no max”
    .p 1

# “,” is identical to new line with same indent

printmax: a b ( a > b ( .p “got max from first”, .p a ) | a < b ( .p “got max from second” , .p b ) | ( .p “no max” , .p 0 ) )

# note that the else / elif operator is identical to logical or, since we don’t evaluate content after the first true value in an “or” statement.

# Extra space around a statement is equivalent to wrapping the statement in ()


printmax2: a b c d
  b > a  |  c > a  |  d > a
    .p max  max b c  max c d
  |  b = a  |  c = a  |  d = a
    .p ~
  |
    .p a
printmax2: a b c d ( b > a  |  c > a  |  d > a ( .p max  max b c  max c d ) | b = a  |  c = a  |  d = a ( .p ~ ) | ( .p a ) )
printmax3: a b c d
  b > a  |  c > a  |  d > a
    .p max
      max b c
      max c d
  | b = a  |  c = a  |  d = a
    .p ~
  |
    .p a
printmax3: a b c d (
  b > a  |  c > a  |  d > a (
    .p max (
      max b c ,
      max c d ) )
  | b = a  |  c = a  |  d = a (
    .p ~ )
  | (
    .p a ) )
printmax3: a b c d ( b > a  |  c > a  |  d > a ( .p max ( max b c , max c d ) ) | b = a  |  c = a  |  d = a ( .p ~ ) | ( .p a ) )


# multiple values in sequence are a tuple, e.g, 1 -2 = 1 -2 evaluates to 1 (true).

# function arguments are provided as a tuple which can be wrapped in parens, or indented on the next line.
# the following are identical
res = myfun 1 2
res = myfun 1 , 2
res = myfun ( 1 2 )
res = myfun ( 1 , 2 )
res = myfun
  1 2
res = myfun
  1 , 2
res = myfun
  ( 1 , 2 )
res =
  myfun
    1
    2
res =
  myfun
    1 ,
    2

# more examples
add: a b ( < a + b )
subtract: a b ( < a - b )
res = #= 7
  add
    add
      1
      3
    subtract
      5
      2
res = ( #= 7
  add (
    add (
      1 ,
      3 ) ,
    subtract (
      5 ,
      2 ) ) )
res = ( add ( add ( 1 , 3 ) , subtract ( 5 , 2 ) ) ) #= 7
res = add ( add ( 1 , 3 ) , subtract ( 5 , 2 ) ) #= 7
res = add ( add ( 1 3 ) , subtract ( 5 2 ) ) #= 7
res = add ( add 1 3 , subtract 5 2 ) #= 7
res = add
  add 1 3 , subtract 5 2 #= 7
res = add add 1 3 , subtract 5 2 #= 7

res = add add 1 3 subtract 5 2 #= 7
# v =  f   f  v v      f   v v
#      |   |  | |      |   | |
#      |   | (   )     |  (   )
#      |   +++++++     ++++++++
#      f      v           v
#      ++++++++++++++++++++++++
#                 v
# values next to each other are a tuple
# functions evaluate to values. (Tuples are values)

get1: < 1
mul1: a ( < a * 2 )
res = add get1 subtract 5 2 #= 4

res = get1 2 #= 1 2
res = get1 mul1b get1 #


printmax4 a b c d:
  .p max
    max
      a b
    max
      c d

printmax4 a b c d: @ max max a b max c d

printmax5 a b c d:
  .p max
    a max
      b max
        c d

printmax5 a b c d: @ max a max b max c d

printallsamebool a b c:
  a & b & c
    .p 1
  | a | b | c
    .p ~
  |
    .p 0
  
printallsamebool a b c: a & b & c @ 1 | a | b | c @ ~ | @ 0

getallsamebool a b c:
  a & b & c
    < 1
  a | b | c
    < ~
  < 0

getallsamebool a b c: a & b & c ( < 1 ) a | b | c ( < ~ ) < 0

isallsamebool a b c:
  < a & b & c  |  !  a | b | c
isallsamebool a b c: <  a & b & c  |  !  a | b | c
isallsamebool a b c: < a&b&c | ! a|b|c

isallsamebool2 a b c:
  all := a & b & c
    < all
  | any := ! a | b | c
    < any
isallsamebool2 a b c: all := a & b & c < all | any := ! a | b | c < any
isallsamebool3 a b c: a & b & c < 1 | ! a | b | c < 1 < 0


isallsamebool3 a b c: a & b & c < 1 | ! a | b | c < 1 < 0
#    |
# new letters followed by space = function declaration

isallsamebool3 a b c: a & b & c < 1 | ! a | b | c < 1 < 0
#                |
# Letters before : = arguments

isallsamebool3 a b c: a & b & c < 1 | ! a | b | c < 1 < 0
#                     |
# old letters = var reference

isallsamebool3 a b c: a & b & c < 1 | ! a | b | c < 1 < 0
#                       |
# & is the logical and operator

example a b c: a ( < a ) b ( < b ) c ( < c )
v1 = example 5 0 10 #= 5
v2 = example 0 10 5 #= 10
v3 = example -1 0 -2 #= ~
v4 = -3

# a variable is evaluated for a condition check when used as a function
# numbers > 0 pass the condition check
v1 (.p “v1 > 0”) #= @ “v1 > 0”
v2 (.p “v2 > 0”) #= @ “v2 > 0”
v3 (.p “v3 > 0”) #= ~
v4 (.p “v4 > 0”) #= ~
57 (.p “57 > 0”) #= @ “57 > 0”
0 (.p “0 > 0”) #= ~
-7 (.p “-7 > 0”) #= ~
~ (.p “~ > 0”) #= ~

a = 5
v1 = a @ 1
v1 = a ( @ 1 )
# Is v1 a tuple of ( 5 , 1 )?
# Is v1 the evaluation of the body of a? #= 1 ?
# in order to disambiguate, tuples always have a comma between terms…?

result = func arg arg

v1 = 1 & 0 #= 0
v2 = 1 | 0 #= 1
v3 = 1 ( @ 3 ) #= 3
v3b = 1
  @ 3 #= 3
v4 = 1 3 #= 1 3
v5 = 2 & 3 #= 1
v6 = | 3 #= 1
v7 = | -3 #= 0

# since @ is return, it doesn’t make sense to assign it to a value
# as such, if it is assigned, it returns a lambda function
v8 = @ 3 #= x: @ 3
v9 = 1 @ 3 #= 1 x: @ 3
t1 t2 = v9
t1 #= 1
t2 #= x: @ 3
w1 w2 = 1 @ 3 #= 1 x: @ 3
w1 #= 1
w2 #= x: @ 3







isallsamebool3 a b c: a & b & c < 1 | ! a | b | c < 1 < 0
#                       |
# & is the logical and operator






…………

C=0 #:counter ;{C} is zero
F:A B C #:add-l :add-r C:subtract
  D=3 #:add
  A+B-C+D #:sum
V=F 50 700 100 #:calculated-sum
print V #=653
F:A B #:


# 2sum
two-sum:a n =
  a:i:f
    a:j:s
      f+s==n
        <- i j




two-sum:a n = > a:i:f > a:j:s > f+s==n > <- i j

# :do-stuff function declaration
d:a n = #:array:number
  # indent
  v=n+1 #:value
  # iterate over $a
  a:i:x #:index:item
    # indent
    sq=x*x #:x-squared set $sq to $x times $x
    # add $x and $n to $s
    #:running-sum declare $s initialize to default of implied type
    s+sq+n
    # if $s is greater than $v return $i
    s>v
      # indent
      # return $i
      <- i
    # else add 1 to $v
    |
      # indent
      v+1
  # iterate over $a again, but no index. No reusing variables
  a:j #:item we can reuse annotations
    # indent
    # call the print function with $j
    print(j)
  # if we have reached the end
  # return $s and $i
  # last statement is returned
  s i

# again without comments
d:a n =
  v=n+1
  a:i:x
    sq=x*x
    s+sq+n
    s>v
      <- i
    |
      v+1
  a:j
    Print(j)
  s i

# again inline
d:a n = > v=n+1 ; a:i:x > sq=x*x ; s+sq+n ; s>v > <- i < | > v+1 << a:j > Print(j) < s i

# as you can see, spaces are important!
# we can also break it up like this :

d:a n = > v=n+1 ; a:i:x > sq=x*x ; s+sq+n ; s>v
  <- i < | > v+1 << a:j > Print(j) < s i

# this replaced the ‘ > ’ with a new line and an indent
# every time ‘ > ’ appears it is identical to being replaced by a new indented line
# same with ‘ < ‘ a new line de-indented and ‘ << ‘ double de-indent etc..
# the ‘ | ‘ is the or operator
# when it begins a line it evaluates the previous statement at the same level and only
# triggers if the statement is false.

# here is an implementation of the max function
max:a b > a>b > <- a < | > <- b

# if $b is true and $n - $k are greater than 0 return $s1 otherwise return $s2
select:b n k s1 s2 = b > n-k>0 > <- s1 << s2
  
b=1
n=4
k=3
s1=“a”
s2=“b”
v=b > n-k>0 > <- s1 << s2
v2=select(b n k s1 s2)
Print(v==v2) #= true
